#!/bin/bash

#
# Copyright Â© 2013-2015 Max Ruman <rmx@guanako.be>
#
# This file is part of Wok.
#
# Wok is free software: you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
#
# Wok is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
# License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with Wok. If not, see <http://www.gnu.org/licenses/>.
#

E_INVALID_USAGE=1
E_TEST_FAILED=2

if [[ -n $1 ]]; then
	inc="$1"
else
	inc="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd -P)/src/common/ui.bash"
fi

if [[ ! -f $inc ]]; then
	echo "Source file ${inc} does not exist" >&2
	exit $E_INVALID_USAGE
fi

. "$inc"

bin="ui_getString"
pipe=

pipe_new()
{
	local pipe="$(mktemp -u)"
	local pipe_ok

	if ! mkfifo -m 600 "$pipe"; then
		return 1
	fi

	echo "$pipe"
}

pipe_init()
{
	while ! pipe="$(pipe_new)"; do
		echo -n >/dev/null
	done
}

pipe_fill()
{
	echo -e "$1" >"$pipe" &
}

pipe_clean()
{
	rm "$pipe"
}

assert_string_equals()
{
	local descr="$1"
	local expect="$2"
	local inp="$3"
	local message="$4"
	local pattern="$5"
	local string

	echo -n "Testing ${descr}: "
	pipe_fill "$inp"
	if [[ -n $message ]]; then
		"$bin" string "$pattern" "$message" <"$pipe" >/dev/null 2>/dev/null
	else
		"$bin" string "$pattern" "" <"$pipe" >/dev/null 2>/dev/null
	fi
	if [[ $string == $expect ]]; then
		echo "OK"
	else
		echo -e "\033[0;31mfailed!\033[0m"
		#echo "Expected: $expect"
		#echo "Result: $string"
		exit $E_TEST_FAILED
	fi
}

pipe_init

#<assert_fn>         <description>          <expectation>   <user_input>                 <message>       <pattern>
assert_string_equals "string #1"            "abc123"        "abc123"                     "Give a string"
assert_string_equals "string #2"            "Hello, world!" "Hello, world!"              "Give a string"
assert_string_equals "syntax validation #1" "abcd1234"      "abc123\nabcd1234"           "Give a string" '.{8,}'
assert_string_equals "syntax validation #2" "b3c 6fa !"     "abc123\naaa222!\nb3c 6fa !" "Give a string" '^([a-f0-9]{3} ){2}!$'

pipe_clean
